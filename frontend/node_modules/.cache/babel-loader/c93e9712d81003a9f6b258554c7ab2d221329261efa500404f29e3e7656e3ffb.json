{"ast":null,"code":"'use strict';\n\n/**\n * Converter\n *\n * @param {string|Array} srcAlphabet\n * @param {string|Array} dstAlphabet\n * @constructor\n */\nfunction Converter(srcAlphabet, dstAlphabet) {\n  if (!srcAlphabet || !dstAlphabet || !srcAlphabet.length || !dstAlphabet.length) {\n    throw new Error('Bad alphabet');\n  }\n  this.srcAlphabet = srcAlphabet;\n  this.dstAlphabet = dstAlphabet;\n}\n\n/**\n * Convert number from source alphabet to destination alphabet\n *\n * @param {string|Array} number - number represented as a string or array of points\n *\n * @returns {string|Array}\n */\nConverter.prototype.convert = function (number) {\n  var i,\n    divide,\n    newlen,\n    numberMap = {},\n    fromBase = this.srcAlphabet.length,\n    toBase = this.dstAlphabet.length,\n    length = number.length,\n    result = typeof number === 'string' ? '' : [];\n  if (!this.isValid(number)) {\n    throw new Error('Number \"' + number + '\" contains of non-alphabetic digits (' + this.srcAlphabet + ')');\n  }\n  if (this.srcAlphabet === this.dstAlphabet) {\n    return number;\n  }\n  for (i = 0; i < length; i++) {\n    numberMap[i] = this.srcAlphabet.indexOf(number[i]);\n  }\n  do {\n    divide = 0;\n    newlen = 0;\n    for (i = 0; i < length; i++) {\n      divide = divide * fromBase + numberMap[i];\n      if (divide >= toBase) {\n        numberMap[newlen++] = parseInt(divide / toBase, 10);\n        divide = divide % toBase;\n      } else if (newlen > 0) {\n        numberMap[newlen++] = 0;\n      }\n    }\n    length = newlen;\n    result = this.dstAlphabet.slice(divide, divide + 1).concat(result);\n  } while (newlen !== 0);\n  return result;\n};\n\n/**\n * Valid number with source alphabet\n *\n * @param {number} number\n *\n * @returns {boolean}\n */\nConverter.prototype.isValid = function (number) {\n  var i = 0;\n  for (; i < number.length; ++i) {\n    if (this.srcAlphabet.indexOf(number[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\nmodule.exports = Converter;","map":{"version":3,"names":["Converter","srcAlphabet","dstAlphabet","length","Error","prototype","convert","number","i","divide","newlen","numberMap","fromBase","toBase","result","isValid","indexOf","parseInt","slice","concat","module","exports"],"sources":["/Users/shravan/Documents/Projects/feb hacks/setup/frontend/node_modules/any-base/src/converter.js"],"sourcesContent":["'use strict';\n\n/**\n * Converter\n *\n * @param {string|Array} srcAlphabet\n * @param {string|Array} dstAlphabet\n * @constructor\n */\nfunction Converter(srcAlphabet, dstAlphabet) {\n    if (!srcAlphabet || !dstAlphabet || !srcAlphabet.length || !dstAlphabet.length) {\n        throw new Error('Bad alphabet');\n    }\n    this.srcAlphabet = srcAlphabet;\n    this.dstAlphabet = dstAlphabet;\n}\n\n/**\n * Convert number from source alphabet to destination alphabet\n *\n * @param {string|Array} number - number represented as a string or array of points\n *\n * @returns {string|Array}\n */\nConverter.prototype.convert = function(number) {\n    var i, divide, newlen,\n    numberMap = {},\n    fromBase = this.srcAlphabet.length,\n    toBase = this.dstAlphabet.length,\n    length = number.length,\n    result = typeof number === 'string' ? '' : [];\n\n    if (!this.isValid(number)) {\n        throw new Error('Number \"' + number + '\" contains of non-alphabetic digits (' + this.srcAlphabet + ')');\n    }\n\n    if (this.srcAlphabet === this.dstAlphabet) {\n        return number;\n    }\n\n    for (i = 0; i < length; i++) {\n        numberMap[i] = this.srcAlphabet.indexOf(number[i]);\n    }\n    do {\n        divide = 0;\n        newlen = 0;\n        for (i = 0; i < length; i++) {\n            divide = divide * fromBase + numberMap[i];\n            if (divide >= toBase) {\n                numberMap[newlen++] = parseInt(divide / toBase, 10);\n                divide = divide % toBase;\n            } else if (newlen > 0) {\n                numberMap[newlen++] = 0;\n            }\n        }\n        length = newlen;\n        result = this.dstAlphabet.slice(divide, divide + 1).concat(result);\n    } while (newlen !== 0);\n\n    return result;\n};\n\n/**\n * Valid number with source alphabet\n *\n * @param {number} number\n *\n * @returns {boolean}\n */\nConverter.prototype.isValid = function(number) {\n    var i = 0;\n    for (; i < number.length; ++i) {\n        if (this.srcAlphabet.indexOf(number[i]) === -1) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = Converter;"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,CAACC,WAAW,EAAEC,WAAW,EAAE;EACzC,IAAI,CAACD,WAAW,IAAI,CAACC,WAAW,IAAI,CAACD,WAAW,CAACE,MAAM,IAAI,CAACD,WAAW,CAACC,MAAM,EAAE;IAC5E,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACnC;EACA,IAAI,CAACH,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAACC,WAAW,GAAGA,WAAW;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,SAAS,CAACK,SAAS,CAACC,OAAO,GAAG,UAASC,MAAM,EAAE;EAC3C,IAAIC,CAAC;IAAEC,MAAM;IAAEC,MAAM;IACrBC,SAAS,GAAG,CAAC,CAAC;IACdC,QAAQ,GAAG,IAAI,CAACX,WAAW,CAACE,MAAM;IAClCU,MAAM,GAAG,IAAI,CAACX,WAAW,CAACC,MAAM;IAChCA,MAAM,GAAGI,MAAM,CAACJ,MAAM;IACtBW,MAAM,GAAG,OAAOP,MAAM,KAAK,QAAQ,GAAG,EAAE,GAAG,EAAE;EAE7C,IAAI,CAAC,IAAI,CAACQ,OAAO,CAACR,MAAM,CAAC,EAAE;IACvB,MAAM,IAAIH,KAAK,CAAC,UAAU,GAAGG,MAAM,GAAG,uCAAuC,GAAG,IAAI,CAACN,WAAW,GAAG,GAAG,CAAC;EAC3G;EAEA,IAAI,IAAI,CAACA,WAAW,KAAK,IAAI,CAACC,WAAW,EAAE;IACvC,OAAOK,MAAM;EACjB;EAEA,KAAKC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;IACzBG,SAAS,CAACH,CAAC,CAAC,GAAG,IAAI,CAACP,WAAW,CAACe,OAAO,CAACT,MAAM,CAACC,CAAC,CAAC,CAAC;EACtD;EACA,GAAG;IACCC,MAAM,GAAG,CAAC;IACVC,MAAM,GAAG,CAAC;IACV,KAAKF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,MAAM,EAAEK,CAAC,EAAE,EAAE;MACzBC,MAAM,GAAGA,MAAM,GAAGG,QAAQ,GAAGD,SAAS,CAACH,CAAC,CAAC;MACzC,IAAIC,MAAM,IAAII,MAAM,EAAE;QAClBF,SAAS,CAACD,MAAM,EAAE,CAAC,GAAGO,QAAQ,CAACR,MAAM,GAAGI,MAAM,EAAE,EAAE,CAAC;QACnDJ,MAAM,GAAGA,MAAM,GAAGI,MAAM;MAC5B,CAAC,MAAM,IAAIH,MAAM,GAAG,CAAC,EAAE;QACnBC,SAAS,CAACD,MAAM,EAAE,CAAC,GAAG,CAAC;MAC3B;IACJ;IACAP,MAAM,GAAGO,MAAM;IACfI,MAAM,GAAG,IAAI,CAACZ,WAAW,CAACgB,KAAK,CAACT,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,CAACU,MAAM,CAACL,MAAM,CAAC;EACtE,CAAC,QAAQJ,MAAM,KAAK,CAAC;EAErB,OAAOI,MAAM;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,SAAS,CAACK,SAAS,CAACU,OAAO,GAAG,UAASR,MAAM,EAAE;EAC3C,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGD,MAAM,CAACJ,MAAM,EAAE,EAAEK,CAAC,EAAE;IAC3B,IAAI,IAAI,CAACP,WAAW,CAACe,OAAO,CAACT,MAAM,CAACC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;MAC5C,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf,CAAC;AAEDY,MAAM,CAACC,OAAO,GAAGrB,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}